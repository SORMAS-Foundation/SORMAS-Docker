version: '2.3'

services:
  sormas:
    extends:
      file: services-base.yml
      service: base-sormas
    labels:
      - autoheal=true
        # override for stop timeout seconds during restart
      - autoheal.stop.timeout=30
    links:
      - postgres
    environment:
      - DB_JDBC_MAXPOOLSIZE=${DB_JDBC_MAXPOOLSIZE}
      - CUSTOMBRANDING_ENABLED=${CUSTOMBRANDING_ENABLED}
      - CUSTOMBRANDING_NAME=${CUSTOMBRANDING_NAME}
      - CUSTOMBRANDING_LOGO_PATH=${CUSTOMBRANDING_LOGO_PATH}
      - CUSTOMBRANDING_USE_LOGINSIDEBAR=${CUSTOMBRANDING_USE_LOGINSIDEBAR}
      - CUSTOMBRANDING_LOGINBACKGROUND_PATH=${CUSTOMBRANDING_LOGINBACKGROUND_PATH}
      - SORMAS_CENTRAL_ENABLED=${SORMAS_CENTRAL_ENABLED}
      - CENTRAL_OIDC_URL=${CENTRAL_OIDC_URL}
      - CENTRAL_REDIS_HOST=${CENTRAL_REDIS_HOST}
      - CENTRAL_REDIS_KEYSTOREPATH=${CENTRAL_REDIS_KEYSTOREPATH}
      - CENTRAL_REDIS_KEYSTOREPASSWORD=${CENTRAL_REDIS_KEYSTOREPASSWORD}
      - CENTRAL_REDIS_TRUSTSTOREPATH=${CENTRAL_REDIS_TRUSTSTOREPATH}
      - CENTRAL_REDIS_TRUSTSTOREPASSWORD=${CENTRAL_REDIS_TRUSTSTOREPASSWORD}
      - SORMAS2SORMAS_ENABLED=${SORMAS2SORMAS_ENABLED}
      - SORMAS2SORMAS_PATH=${SORMAS2SORMAS_PATH}
      - SORMAS2SORMAS_ID=${SORMAS2SORMAS_ID}
      - SORMAS2SORMAS_KEYSTORENAME=${SORMAS2SORMAS_KEYSTORENAME}
      - SORMAS2SORMAS_KEYPASSWORD=${SORMAS2SORMAS_KEYPASSWORD}
      - SORMAS2SORMAS_ROOTCAALIAS=${SORMAS2SORMAS_ROOTCAALIAS}
      - SORMAS2SORMAS_TRUSTSTORENAME=${SORMAS2SORMAS_TRUSTSTORENAME}
      - SORMAS2SORMAS_TRUSTSTOREPASSWORD=${SORMAS2SORMAS_TRUSTSTOREPASSWORD}
      - SORMAS2SORMAS_OIDC_REALM=${SORMAS2SORMAS_OIDC_REALM}
      - SORMAS2SORMAS_OIDC_CLIENTID=${SORMAS2SORMAS_OIDC_CLIENTID}
      - SORMAS2SORMAS_OIDC_CLIENTSECRET=${SORMAS2SORMAS_OIDC_CLIENTSECRET}
      - SORMAS2SORMAS_REDIS_CLIENTNAME=${SORMAS2SORMAS_REDIS_CLIENTNAME}
      - SORMAS2SORMAS_REDIS_CLIENTPASSWORD=${SORMAS2SORMAS_REDIS_CLIENTPASSWORD}
      - SORMAS2SORMAS_REDIS_KEYPREFIX=${SORMAS2SORMAS_REDIS_KEYPREFIX}
      - SORMAS2SORMAS_RETAINCASEEXTERNALTOKEN=${SORMAS2SORMAS_RETAINCASEEXTERNALTOKEN}
      - SORMAS_ORG_ID=${SORMAS_ORG_ID}1.03.1.01.
      - SORMAS_ORG_NAME=${SORMAS_ORG_NAME}"Stadt Braunschweig"
      - SORMAS_HOST_NAME=${SORMAS_SERVER_URL}
      - SORMAS_HTTPS_PORT=443
      - NAMESIMILARITYTHRESHOLD=${NAMESIMILARITYTHRESHOLD}
    volumes:
      - ${SORMAS_PATH}/documents:/opt/sormas/documents
      - ${SORMAS_PATH}/custom:/opt/sormas/custom
      - ${SORMAS_PATH}/sormas-logs:/opt/domains/sormas/logs
      - ${SORMAS_PATH}/sormas2sormas:/opt/sormas/sormas2sormas
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    extends:
      file: services-base.yml
      service: base-postgres
    volumes:
      - ${SORMAS_PATH}/psqldata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  pg_dump:
    extends:
      file: services-base.yml
      service: base-pg_dump
    environment:
      - DB_HOST=${DB_HOST}
      - PGPASSWORD=${SORMAS_POSTGRES_PASSWORD}
      - POSTGRES_USER=${SORMAS_POSTGRES_USER}
      - MIN=15,45 # Twice the hour on 15 and 45 (use crontab notation)
      - HOUR= # Keep empty for every hour. Use crontab notation otherwise
      - KEEP=1 # keep db dumps for one day in backup folder
      - BACKUP_FILES=${BACKUP_FILES}
      - BACKUP_PATH=${SORMAS_PATH}
    volumes:
      - /backup:/var/opt/db_dumps
      - ${SORMAS_PATH}:${SORMAS_PATH}
    depends_on:
      postgres:
        condition: service_healthy

  apache2:
    extends:
      file: services-base.yml
      service: base-apache2
    links:
      - sormas
    environment:
      - PROMETHEUS_SERVERS=${PROMETHEUS_SERVERS}
    volumes:
      - ./apache2/certs:/usr/local/apache2/certs
      - ${SORMAS_PATH}/apache2_log:/var/log/apache2
    ports:
      - 443:443
      - 80:80
    depends_on:
      sormas:
        condition: service_healthy

  autoheal:
    extends:
      file: services-base.yml
      service: base-autoheal
    environment:
        # wait 600 seconds before first health check
      - AUTOHEAL_START_PERIOD=600
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

